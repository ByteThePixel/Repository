repeat wait() until game:IsLoaded()

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()
local w = library:CreateWindow("Grow a Garden")

local b = w:CreateFolder("Scripts")

b:Button("Auto Buy",function()
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer
local guiBase = player:WaitForChild("PlayerGui"):WaitForChild("Seed_Shop"):WaitForChild("Frame"):WaitForChild("ScrollingFrame")
local gearGuiBase = player:WaitForChild("PlayerGui"):WaitForChild("Gear_Shop"):WaitForChild("Frame"):WaitForChild("ScrollingFrame")
local easterGuiBase = player:WaitForChild("PlayerGui"):WaitForChild("Easter_Shop"):WaitForChild("Frame"):WaitForChild("ScrollingFrame")

local buySeedEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock")
local buyGearEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyGearStock")
local buyEasterEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyEasterStock")

local webhookUrl = "https://discord.com/api/webhooks/1361347625630040156/wRzGgyWo-Fb8vbypCzWG-yllKfYFHDsUAi1wiWBy7aH96Ocjdzs__xFhk_BofOuJpvm5"

local itemNames = {
	"Apple", "Bamboo", "Cactus", "Carrot", "Blueberry", "Strawberry", "Coconut",
	"Corn", "Dragon Fruit", "Mango", "Pumpkin", "Tomato", "Watermelon",
	"Daffodil", "Grape", "Orange Tulip" -- ← added these
}

local easterItems = {
	"Candy Blossom", "Candy Sunflower", "Chocolate Carrot",
	"Chocolate Sprinkler", "Easter Egg", "Red Lollipop"
}

local processed = {}
local sessionPurchases = {}

-- === Function to convert stock text (e.g., "X5") into number
local function getStockValue(stockText)
	local stock = string.match(stockText, "X(%d+)")
	return tonumber(stock)
end

-- === Function to track purchases
local function recordPurchase(itemName, quantity)
	sessionPurchases[itemName] = (sessionPurchases[itemName] or 0) + quantity
end

-- === Function to send summary webhook message
local function sendSummaryWebhook()
	if next(sessionPurchases) == nil then return end -- skip if nothing bought

	local lines = {}
	table.insert(lines, "**[AutoBuy Summary]** Session Purchase Report:")

	for item, amount in pairs(sessionPurchases) do
		table.insert(lines, "`" .. item .. "` x" .. amount)
	end

	local message = table.concat(lines, "\n")

	local payload = HttpService:JSONEncode({ content = message })

	local success, err = pcall(function()
		if syn and syn.request then
			syn.request({
				Url = webhookUrl,
				Method = "POST",
				Headers = { ["Content-Type"] = "application/json" },
				Body = payload
			})
		elseif http and http.request then
			http.request({
				Url = webhookUrl,
				Method = "POST",
				Headers = { ["Content-Type"] = "application/json" },
				Body = payload
			})
		elseif request then
			request({
				Url = webhookUrl,
				Method = "POST",
				Headers = { ["Content-Type"] = "application/json" },
				Body = payload
			})
		else
			warn("No supported HTTP request function found.")
		end
	end)

	if not success then
		warn("[WEBHOOK ERROR]", err)
	end
end

-- === Monitors one item
local function monitorItem(itemName, frameParent, buyFunc)
	local itemFrame = frameParent:WaitForChild(itemName)
	local stockTextLabel = itemFrame:FindFirstChild("Stock_Text", true)

	if not stockTextLabel or not stockTextLabel:IsA("TextLabel") then
		warn("Could not find Stock_Text for:", itemName)
		return
	end

	print("[INIT] Monitoring stock for", itemName)

	local function onStockChanged()
		local currentStock = getStockValue(stockTextLabel.Text)
		print("[STOCK CHECK]", itemName, "stock is now:", stockTextLabel.Text)

		if currentStock and currentStock > 0 and not processed[itemName] then
			processed[itemName] = true
			print("[BUY]", itemName, "x" .. currentStock)

			for i = 1, currentStock do
				buyFunc(itemName)
			end

			recordPurchase(itemName, currentStock)
		elseif currentStock == 0 then
			processed[itemName] = nil
			print("[RESET]", itemName, "stock is now 0")
		end
	end

	stockTextLabel:GetPropertyChangedSignal("Text"):Connect(onStockChanged)
	onStockChanged()
end

-- === Start monitoring seed items
for _, itemName in ipairs(itemNames) do
	task.spawn(function()
		monitorItem(itemName, guiBase, function(name)
			buySeedEvent:FireServer(name)
		end)
	end)
end

-- === Monitor GodlySprinkler
for _, gearName in ipairs({ "GodlySprinkler", "MasterSprinkler" }) do
	task.spawn(function()
		monitorItem(gearName, gearGuiBase, function(name)
			buyGearEvent:FireServer(name, 0)
		end)
	end)
end

-- === Monitor Easter Items
for _, itemName in ipairs(easterItems) do
	task.spawn(function()
		monitorItem(itemName, easterGuiBase, function(name)
			buyEasterEvent:FireServer(name)
		end)
	end)
end

-- === Periodically send webhook summary
task.spawn(function()
	while true do
		wait(300) -- send every 5 Minutes (you can change this)
		sendSummaryWebhook()
	end
end)

end)

b:Button("Restock Timer",function()
	local Players = game:GetService("Players")
	local player = Players.LocalPlayer
	local playerGui = player:WaitForChild("PlayerGui")

	local timerLabel = playerGui:WaitForChild("Seed_Shop")
		:WaitForChild("Frame")
		:WaitForChild("Frame")
		:WaitForChild("Timer")

	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "RestockTimerHint"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = playerGui
	screenGui.DisplayOrder = 10

	local frame = Instance.new("Frame")
	frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	frame.Size = UDim2.new(1, 0, 0, 30)
	frame.Position = UDim2.new(0, 0, 0, 0)
	frame.BorderSizePixel = 0
	frame.Parent = screenGui

	local label = Instance.new("TextLabel")
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(1, 0, 1, 0)
	label.Font = Enum.Font.SourceSansBold
	label.TextSize = 20
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.TextStrokeTransparency = 0.8
	label.Text = "Restock in: ??"
	label.Parent = frame

	local function updateHint()
		local text = timerLabel.Text
		local timeStr = string.match(text, "(%d+:%d+)")
		if timeStr then
			label.Text = "🌱 Seed Restock in: " .. timeStr
		end
	end

	timerLabel:GetPropertyChangedSignal("Text"):Connect(updateHint)
	updateHint()
end)

b:Button("Sell (N)",function()
	local UserInputService = game:GetService("UserInputService")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local sellEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory")

	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if input.KeyCode == Enum.KeyCode.N then
			sellEvent:FireServer()
		end
	end)
end)
