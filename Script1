repeat wait() until game:IsLoaded()

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()
local w = library:CreateWindow("Grow a Garden")

local b = w:CreateFolder("Scripts")

b:Button("Auto Buy",function()
	local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local player = Players.LocalPlayer
	local guiBase = player:WaitForChild("PlayerGui"):WaitForChild("Seed_Shop"):WaitForChild("Frame"):WaitForChild("ScrollingFrame")
	local buyEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock")

	local itemNames = {
		"Apple", "Bamboo", "Cactus", "Carrot", "Coconut",
		"Corn", "Dragon Fruit", "Mango", "Pumpkin", "Tomato", "Watermelon"
	}

	local processed = {}

	local function getStockValue(stockText)
		local stock = string.match(stockText, "X(%d+)")
		return tonumber(stock)
	end

	local function monitorItem(itemName)
		local itemFrame = guiBase:WaitForChild(itemName)
		local stockTextLabel = itemFrame:FindFirstChild("Stock_Text", true)

		if not stockTextLabel or not stockTextLabel:IsA("TextLabel") then
			warn("Could not find Stock_Text for:", itemName)
			return
		end

		print("[INIT] Monitoring stock for", itemName)

		local function onStockChanged()
			local currentStock = getStockValue(stockTextLabel.Text)
			print("[STOCK CHECK]", itemName, "stock is now:", stockTextLabel.Text)

			if currentStock and currentStock > 0 and not processed[itemName] then
				processed[itemName] = true
				print("[BUY]", itemName, "x" .. currentStock)
				for i = 1, currentStock do
					buyEvent:FireServer(itemName)
				end
			elseif currentStock == 0 then
				processed[itemName] = nil
				print("[RESET]", itemName, "stock is now 0")
			end
		end

		stockTextLabel:GetPropertyChangedSignal("Text"):Connect(onStockChanged)
		onStockChanged()
	end

	for _, itemName in ipairs(itemNames) do
		task.spawn(function()
			monitorItem(itemName)
		end)
	end
end)

b:Button("Restock Timer",function()
	local Players = game:GetService("Players")
	local player = Players.LocalPlayer
	local playerGui = player:WaitForChild("PlayerGui")

	local timerLabel = playerGui:WaitForChild("Seed_Shop")
		:WaitForChild("Frame")
		:WaitForChild("Frame")
		:WaitForChild("Timer")

	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "RestockTimerHint"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = playerGui
	screenGui.DisplayOrder = 10

	local frame = Instance.new("Frame")
	frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	frame.Size = UDim2.new(1, 0, 0, 30)
	frame.Position = UDim2.new(0, 0, 0, 0)
	frame.BorderSizePixel = 0
	frame.Parent = screenGui

	local label = Instance.new("TextLabel")
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(1, 0, 1, 0)
	label.Font = Enum.Font.SourceSansBold
	label.TextSize = 20
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.TextStrokeTransparency = 0.8
	label.Text = "Restock in: ??"
	label.Parent = frame

	local function updateHint()
		local text = timerLabel.Text
		local timeStr = string.match(text, "(%d+:%d+)")
		if timeStr then
			label.Text = "ðŸŒ± Seed Restock in: " .. timeStr
		end
	end

	timerLabel:GetPropertyChangedSignal("Text"):Connect(updateHint)
	updateHint()
end)

b:Button("Sell (N)",function()
	local UserInputService = game:GetService("UserInputService")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local sellEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory")

	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if input.KeyCode == Enum.KeyCode.N then
			sellEvent:FireServer()
		end
	end)
end)
